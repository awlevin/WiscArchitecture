/*
module shifter_16bit(Shift_Out, Shift_In, Shift_Val, Mode);

input [15:0] Shift_In; // This is the input data to perform shift operation on
input [3:0] Shift_Val; // Shift amount (used to shift the input data)
input Mode; // To indicate 0=SLL or 1=SRA

output reg [15:0] Shift_Out; // Shifted output data

always @(*)
	case (Shift_Val)
		4'b0000 : assign Shift_Out = Shift_In;
		4'b0001 : assign Shift_Out = Mode ? {Shift_In[15], Shift_In[15:1]} : {Shift_In[14:0], 1'b0};
		4'b0010 : assign Shift_Out = Mode ? {{2{Shift_In[15]}}, Shift_In[15:2]} : {Shift_In[13:0], 2'b0}; 
		4'b0011 : assign Shift_Out = Mode ? {{3{Shift_In[15]}}, Shift_In[15:3]} : {Shift_In[12:0], 3'b0};
		4'b0100 : assign Shift_Out = Mode ? {{4{Shift_In[15]}}, Shift_In[15:4]} : {Shift_In[11:0], 4'b0};
		4'b0101 : assign Shift_Out = Mode ? {{5{Shift_In[15]}}, Shift_In[15:5]} : {Shift_In[10:0], 5'b0};
		4'b0110 : assign Shift_Out = Mode ? {{6{Shift_In[15]}}, Shift_In[15:6]} : {Shift_In[9:0], 6'b0};
		4'b0111 : assign Shift_Out = Mode ? {{7{Shift_In[15]}}, Shift_In[15:7]} : {Shift_In[8:0], 7'b0};
		4'b1000 : assign Shift_Out = Mode ? {{8{Shift_In[15]}}, Shift_In[15:8]} : {Shift_In[7:0], 8'b0};
		4'b1001 : assign Shift_Out = Mode ? {{9{Shift_In[15]}}, Shift_In[15:9]} : {Shift_In[6:0], 9'b0};
		4'b1010 : assign Shift_Out = Mode ? {{10{Shift_In[15]}}, Shift_In[15:10]} : {Shift_In[5:0], 10'b0};
		4'b1011 : assign Shift_Out = Mode ? {{11{Shift_In[15]}}, Shift_In[15:11]} : {Shift_In[4:0], 11'b0};
		4'b1100 : assign Shift_Out = Mode ? {{12{Shift_In[15]}}, Shift_In[15:12]} : {Shift_In[3:0], 12'b0};
		4'b1101 : assign Shift_Out = Mode ? {{13{Shift_In[15]}}, Shift_In[15:13]} : {Shift_In[2:0], 13'b0};
		4'b1110 : assign Shift_Out = Mode ? {{14{Shift_In[15]}}, Shift_In[15:14]} : {Shift_In[1:0], 14'b0};
		4'b1111 : assign Shift_Out = Mode ? {16{Shift_In[15]}} : {Shift_In[0], 15'b0};
		default : assign Shift_Out = Shift_In;
	endcase

endmodule


module ror_16bit(Rotate_In, Rotate_Val, Rotate_Out);

input [15:0] Rotate_In;
input [3:0] Rotate_Val;

output reg [15:0] Rotate_Out;

always @(*)
	case (Rotate_Val)
		4'b0000 : assign Rotate_Out = Rotate_In;
		4'b0001 : assign Rotate_Out = {Rotate_In[0], Rotate_In[15:1]};
		4'b0010 : assign Rotate_Out = {Rotate_In[1:0], Rotate_In[15:2]}; 
		4'b0011 : assign Rotate_Out = {Rotate_In[2:0], Rotate_In[15:3]};
		4'b0100 : assign Rotate_Out = {Rotate_In[3:0], Rotate_In[15:4]};
		4'b0101 : assign Rotate_Out = {Rotate_In[4:0], Rotate_In[15:5]};
		4'b0110 : assign Rotate_Out = {Rotate_In[5:0], Rotate_In[15:6]};
		4'b0111 : assign Rotate_Out = {Rotate_In[6:0], Rotate_In[15:7]};
		4'b1000 : assign Rotate_Out = {Rotate_In[7:0], Rotate_In[15:8]};
		4'b1001 : assign Rotate_Out = {Rotate_In[8:0], Rotate_In[15:9]};
		4'b1010 : assign Rotate_Out = {Rotate_In[9:0], Rotate_In[15:10]};
		4'b1011 : assign Rotate_Out = {Rotate_In[10:0], Rotate_In[15:11]};
		4'b1100 : assign Rotate_Out = {Rotate_In[11:0], Rotate_In[15:12]};
		4'b1101 : assign Rotate_Out = {Rotate_In[12:0], Rotate_In[15:13]};
		4'b1110 : assign Rotate_Out = {Rotate_In[13:0], Rotate_In[15:14]};
		4'b1111 : assign Rotate_Out = {Rotate_In[14:0], Rotate_In[15]};
		default : assign Rotate_Out = Rotate_In;
	endcase

endmodule
*/