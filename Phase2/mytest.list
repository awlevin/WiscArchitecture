# Initialize registers
# R1 = 1, R2 = 0x8000, R3 = 3, R4 = 0xff00
	LLB R1, 0x01
	LHB R1, 0x00
	LLB R2, 0x00
	LHB R2, 0x80
	LLB R3, 0x03
	LHB R3, 0x00
	LLB R4, 0x00
	LHB R4, 0xff
# Test all conditions for B
	B 111, L8	# Start with unconditional branch to L8
	HLT
L0:	SUB R8, R3, R3	# R8 = 3 - 3   : Zero so don't branch
	B 000, LB0
	SLL R8, R3, 3	# R8 = 3 << 3 = 24   : Non-zero so branch to L9
	B 000, L9
	HLT
L1:	SUB R8, R3, R1	# R8 = 3 - 1   : Non-zero so don't branch
	B 001, LB1
	SUB R8, R1, R1	# R8 = 1 - 1   : Zero so branch to L0
	B 001, L0
	HLT
L2:	SUB R8, R1, R3	# R8 = 1 - 3   : 1 isn't greater than 3 so don't branch
	B 010, LB2
	SUB R8, R3, R1	# R8 = 3 - 1   : 3 is greater than 1 so branch to L1
	B 010, L1
	HLT
L3:	SUB R8, R3, R1	# R8 = 3 - 1   : 3 isn't less than 1 so don't branch
	B 011, LB3
	SUB R8, R1, R3	# R8 = 1 - 3   : 1 is less than 3 so branch to L2
	B 011, L2
	HLT
L4:	SUB R8, R1, R3	# R8 = 1 - 3   : 1 isn't greater than or equal to 3 so don't branch
	B 100, LB4
	SUB R8, R3, R3	# R8 = 3 - 3   : 3 is greater than or equal to 3 so branch to L3
	B 100, L3
	HLT
L5:	SUB R8, R1, R3	# R8 = 1 - 3   : 1 isn't greater than or equal to 3 so don't branch
	B 100, LB5
	SUB R8, R3, R1	# R8 = 3 - 1   : 3 is greater than or equal to 1 so branch to L4
	B 100, L4
	HLT
L6:	SUB R8, R3, R1	# R8 = 3 - 1   : 3 isn't less than or equal to 1 so don't branch
	B 101, LB6
	SUB R8, R1, R1	# R8 = 1 - 1   : 1 is less than or equal to 1 so branch to L5
	B 101, L5
	HLT
L7:	SUB R8, R3, R1	# R8 = 3 - 1   : 3 isn't less than or equal to 1 so don't branch
	B 101, LB7
	SUB R8, R1, R3	# R8 = 1 - 3   : 1 is less than or equal to 3 so branch to L6
	B 101, L6
	HLT
L8:	ADD R8, R2, R1	# R8 = -32768 + 1   : Doesn't overflow so don't branch
	B 110, LB8
	SUB R8, R2, R1	# R8 = -32768 - 1   : Overflows so branch to L7
	B 110, L7
	HLT
# Make sure SW and LW work
L9:	SW R8, R4, 2	# 24 -> mem[0xff04]
	ADD R5, R1, R3	# R5 = 1 + 3
	ADD R6, R4, R5	# R6 = 0xff00 + 4
	LW R9, R6, 0	# R9 <- mem[0xff04] = 24
	SUB R7, R8, R9	# R7 = 24 - 24 = 0 so don't branch
	B 000, LB9
	LLB R7, 0x1a	# R7 = 26
	PCS R10		# R10 = PC
	ADD R10, R10, R7	# R10 = R10 + 26
	BR 000, R10	# Non-zero so branch to value in R10, see comments below
# If we're here we branched incorrectly
LB0:	HLT
LB1:	HLT
LB2:	HLT
LB3:	HLT
LB4:	HLT
LB5:	HLT
LB6:	HLT
LB7:	HLT
LB8:	HLT
LB9:	HLT
# Branch here from BR instruction
# Test ALU
	LLB R10, 0x0A	# R10 = 10
	SRA R5, R10, 1	# R5 = 10 >>> 1 = 5
	LLB R3, 0x05	# R3 = 5
	SUB R3, R3, R5	# R3 = 5 - 5 = 0 so don't branch
	B 000, LALU0
	XOR R6, R10, R5 # R6 = 10 ^ 5 = 0x000F
	LLB R3, 0x0f	# R3 = 0x000F
	SUB R3, R3, R6	# R3 = 15 - 15 = 0 so don't branch
	B 000, LALU1
	SLL R6, R6, 12	# R6 = 0x000F << 12 = 0xF000
	LHB R3, 0xf0	# R3 = 0xF000
	SUB R3, R3, R6	# R3 = 0xF000 - 0xF000 = 0 so don't branch
	B 000, LALU2
	SRA R6, R6, 14	# R6 = 0xF000 >>> 14 = 0xFFFF
	ADD R3, R6, R1	# R3 = -1 + 1 = 0 so don't branch
	B 000, LALU3
	ROR R5, R5, 5	# R5 = 5 rotate right by 5 = 0x2800
	LHB R3, 0x28	# R3 = 0x2800
	SUB R3, R3, R5	# R3 = 0x2800 - 0x2800 = 0 so don't branch
	B 000, LALU4
	LLB R11, 0xa2
	LHB R11, 0x50	# R11 = 0x50a2
	LLB R12, 0x93
	LHB R12, 0x41	# R12 = 0x4193
	LLB R3, 0x85
	LHB R3, 0x71	# R3 = 0x7185
	PADDSB R13, R12, R11	# R13 = {sat(5+4),sat(0+1),sat(a+9),sat(2+3)} = 0x7185
	SUB R3, R3, R13	# R3 = 0x7185 - 0x7185 = 0 so don't branch
	B 000, LALU5
	LLB R11, 0x49
	LHB R11, 0x05	# R11 = 0x0549
	LLB R12, 0x00
	LHB R12, 0x10	# R12 = 0x1000
	LLB R3, 0x5e
	LHB R3, 0x00	# R3 = 0x005E
	RED R13, R12, R11	# R13 = {(0x10+0x05)+(0x00+0x49)} = 0x005E
	SUB R3, R3, R13	# R3 = 0x005E - 0x005E = 0 so don't branch
	B 000, LALU6
# If we're here everything worked
	HLT
# If we're here our ALU was incorrect
LALU0:	HLT
LALU1:	HLT
LALU2:	HLT
LALU3:	HLT
LALU4:	HLT
LALU5:	HLT
LALU6:	HLT
