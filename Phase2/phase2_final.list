#Note that for every branch/Branch reg, there will be a 1 cycle stall (except for unconditional)

PCS R0 #addr of correct halt instr - 2
B 111,Normal_Execution
Everthing_Worked:
	HLT
Normal_Execution:
	LLB R1, 0x02
	LHB R1,	0x00
	ADD R0,R0,R1
	ADD R7, R7,R0 #We need to add 2 to R0,which holds the addr of the everything_worked halt

# Initialize registers
# R1 = 1, R2 = 0x8000, R3 = 3, R4 = 0xff00
	LLB R1, 0x01
	LHB R1, 0x00
	LLB R2, 0x00
	LHB R2, 0x80
	LLB R3, 0x03
	LHB R3, 0x00
	LLB R4, 0x00
	LHB R4, 0xff

# Test all conditions for B
	B 111, L8	# Start with unconditional branch to L8
	HLT
L0:	SUB R8, R3, R3	# R8 = 3 - 3   : Zero so don't branch
	B 000, LB0
	SLL R8, R3, 3	# R8 = 3 << 3 = 24   : Non-zero so branch to L9
	B 000, L9
	HLT
L1:	SUB R8, R3, R1	# R8 = 3 - 1   : Non-zero so don't branch
	B 001, LB1
	SUB R8, R1, R1	# R8 = 1 - 1   : Zero so branch to L0
	B 001, L0
	HLT
L2:	SUB R8, R1, R3	# R8 = 1 - 3   : 1 isn't greater than 3 so don't branch
	B 010, LB2
	SUB R8, R3, R1	# R8 = 3 - 1   : 3 is greater than 1 so branch to L1
	B 010, L1
	HLT
L3:	SUB R8, R3, R1	# R8 = 3 - 1   : 3 isn't less than 1 so don't branch
	B 011, LB3
	SUB R8, R1, R3	# R8 = 1 - 3   : 1 is less than 3 so branch to L2
	B 011, L2
	HLT
L4:	SUB R8, R1, R3	# R8 = 1 - 3   : 1 isn't greater than or equal to 3 so don't branch
	B 100, LB4
	SUB R8, R3, R3	# R8 = 3 - 3   : 3 is greater than or equal to 3 so branch to L3
	B 100, L3
	HLT
L5:	SUB R8, R1, R3	# R8 = 1 - 3   : 1 isn't greater than or equal to 3 so don't branch
	B 100, LB5
	SUB R8, R3, R1	# R8 = 3 - 1   : 3 is greater than or equal to 1 so branch to L4
	B 100, L4
	HLT
L6:	SUB R8, R3, R1	# R8 = 3 - 1   : 3 isn't less than or equal to 1 so don't branch
	B 101, LB6
	SUB R8, R1, R1	# R8 = 1 - 1   : 1 is less than or equal to 1 so branch to L5
	B 101, L5
	HLT
L7:	SUB R8, R3, R1	# R8 = 3 - 1   : 3 isn't less than or equal to 1 so don't branch
	B 101, LB7
	SUB R8, R1, R3	# R8 = 1 - 3   : 1 is less than or equal to 3 so branch to L6
	B 101, L6
	HLT
L8:	ADD R8, R2, R1	# R8 = -32768 + 1   : Doesn't overflow so don't branch
	B 110, LB8
	SUB R8, R2, R1	# R8 = -32768 - 1   : Overflows so branch to L7
	B 110, L7
	HLT
# Make sure SW and LW work
L9:	SW R8, R4, 2	# 24 -> mem[0xff04]
	ADD R5, R1, R3	# R5 = 1 + 3
	ADD R6, R4, R5	# R6 = 0xff00 + 4
#EX to EX fwd(no stall)
	LW R9, R6, 0	# R9 <- mem[0xff04] = 24
	SUB R7, R8, R9	# R7 = 24 - 24 = 0 so don't branch
	B 000, LB9
	LLB R7, 0x1a	# R7 = 26(decimal)
	PCS R10		# R10 = PC
	ADD R10, R10, R7	# R10 = R10 + 26
	B 111, ALU_TEST	# Branch to alu tests
# If we're here we branched incorrectly
LB0:	HLT
LB1:	HLT
LB2:	HLT
LB3:	HLT
LB4:	HLT
LB5:	HLT
LB6:	HLT
LB7:	HLT
LB8:	HLT
LB9:	HLT

ALU_TEST:

# Branch here from BR instruction
# Test ALU
	LLB R10, 0x0A	# R10 = 10
#Ex to Ex fwd
	SRA R5, R10, 1	# R5 = 10 >>> 1 = 5
	LLB R3, 0x05	# R3 = 5
#Ex to ex fwd
	SUB R3, R3, R5	# R3 = 5 - 5 = 0 so don't branch
	B 000, LALU0
	XOR R6, R10, R5 # R6 = 10 ^ 5 = 0x000F
	LLB R3, 0x0f	# R3 = 0x000F
#Ex to ex fwd
	SUB R3, R3, R6	# R3 = 15 - 15 = 0 so don't branch
	B 000, LALU1
	SLL R6, R6, 12	# R6 = 0x000F << 12 = 0xF000
	LHB R3, 0xf0	# R3 = 0xF000
#Ex to ex fwd
	SUB R3, R3, R6	# R3 = 0xF000 - 0xF000 = 0 so don't branch
	B 000, LALU2
	SRA R6, R6, 14	# R6 = 0xF000 >>> 14 = 0xFFFF
#Ex to ex fwd
	ADD R3, R6, R1	# R3 = -1 + 1 = 0 so don't branch
	B 000, LALU3
	ROR R5, R5, 5	# R5 = 5 rotate right by 5 = 0x2800
	LHB R3, 0x28	# R3 = 0x2800
#Ex to ex fwd
	SUB R3, R3, R5	# R3 = 0x2800 - 0x2800 = 0 so don't branch
	B 000, LALU4
	LLB R11, 0xa2
#Ex to ex fwd
	LHB R11, 0x50	# R11 = 0x50a2
	LLB R12, 0x93
#Ex to ex fwd
	LHB R12, 0x41	# R12 = 0x4193
	LLB R3, 0x85
#Ex to ex fwd
	LHB R3, 0x71	# R3 = 0x7185
#RF bypass (R12) ?
	PADDSB R13, R12, R11	# R13 = {sat(5+4),sat(0+1),sat(a+9),sat(2+3)} = 0x7185
#Mem to ex fwd
	SUB R3, R3, R13	# R3 = 0x7185 - 0x7185 = 0 so don't branch
	B 000, LALU5
	LLB R11, 0x49
	LHB R11, 0x05	# R11 = 0x0549
	LLB R12, 0x00
	LHB R12, 0x10	# R12 = 0x1000
	LLB R3, 0x5e
	LHB R3, 0x00	# R3 = 0x005E
	RED R13, R12, R11	# R13 = {(0x10+0x05)+(0x00+0x49)} = 0x005E
#Ex to ex fwd
	SUB R3, R3, R13	# R3 = 0x005E - 0x005E = 0 so don't branch
	B 000, LALU6

#BR, br w/ fwd b4 and after, Flush test, mem to ex, mem to mem
#More stuff
	#R3 = 0
	#B 111,2 after
	#ADD R3 = 2
	#2 later
	#ADD R3 = 1

#Check flushing works correctly
Flushing_Check:
	LLB R1, 0x00
	LHB R1, 0x00 // R1 = 0x0000
	LLB R2, 0x01
	LHB R2, 0x00 // R2 = 0x0001
	LLB R3, 0x02
	LHB R3, 0x00 // R3 = 0x0002
	LLB R4, 0x04
	LHB R4, 0x00 // R4 = 0x0004
	B 111, SKIP_ADD
	ADD R3,R3,R2 //If this line executes, then flushing isn't working
SKIP_ADD:
	ADD R3, R3, R3 //R3 = 0x0004, if flushing workings correctly
	SUB R1, R3, R4 //R1 = 0x0
	B 000, FLUSH0 //Branch if R1 isn't zero aka flushing didn't work

Mem_to_Mem_Check:
	SW R3, R4, 0 # Mem[0x0004] < 0x0004
	LW R5, R4, 0 # R5 = Mem[0x0004] = 0x0004
#Mem to mem fwd
	SW R5, R1, 0 # Mem[0x0000] = 0x0004
	LW R6, R1, 0 # R6 = Mem[0x0000] = 0x0004
#Mem to ex fwd (1 stalled cycle)
	SUB R7, R6, R3 # R7 = 4 - 4 = 0
	B 000, MEM_FWD_ERR # br if R7 != 0

Branch_Register_Check:
	SUB R10,R10,R10 # R10 = R10-R10 = 0
	PCS R9 # Points to branch instr in next line
	B 000, Fwd_to_Branch_Register #should not be taken 1st time, should be taken second time
	LLB R1, 0x01
	LHB R1, 0x00 #R1 = 1
	ADD R10,R10,R1 #R10 = 0 + 1 = 1
#Should stall here for updating flags
	BR 010,R9 #Since 1>0, br should be taken
	# should stall here when branching to another branch
	
Fwd_to_Branch_Register:
# BR EX to ID fwd
	LLB R11, 0x16
	LHB R11, 0x00
	PCS R8 # Points to add instr in next line
	ADD R8, R8, R11
	BR 111, R8 # Branches to PCS instr two lines below
	B 111, Mem_to_ex_Fwd2 # 
# BR Mem to ID fwd	
	LLB R11, 0x0A
	LLB R12, 0xED
	LHB R12, 0xFE
	PCS R6
	SUB R6, R6, R11
	SW R6, R12, 0
	LW R5, R12, 0
	BR 111, R5
# BR Ex to ID fwd	
	LLB R11, 0x14
	PCS R7
	SUB R7, R7, R11
	LLB R11, 0x00 # 
	BR 000, R7 # R7 != 0 so BR to B instr 4 lines above

Mem_to_Ex_Fwd2:
	LHB R1,0x00
	LLB R1,0x01 # R1 = 1
	SUB R9,R9,R9 # R9 = 0, but this instr is used as a nop
#Should forward both R9 and R10
	SUB R10, R9, R1 # R10 = 0 - 1 = -1
#Fwds to reg1 & reg2
	ADD R9, R10, R10 # R9 = -1 + -1 = -2


Check_Unconditional_No_Stall:
	B 111, WOO_EVERYTHING_WORKED
NOP:
	ADD R1,R1,R1 # Lined should be skipped

WOO_EVERYTHING_WORKED:
# If we're here everything worked
	BR 111,R0 # BR to correct halt



# If we're here our ALU was incorrect
LALU0:	HLT
LALU1:	HLT
LALU2:	HLT
LALU3:	HLT
LALU4:	HLT
LALU5:	HLT
LALU6:	HLT

FLUSH0 : HLT
MEM_FWD_ERR : HLT