# Initialize registers
# R1 = 1, R2 = 0x8000, R3 = 3, R4 = 0xff00

#Upper halves
	LHB R1, 0x00
	LHB R2, 0x80
	LHB R3, 0x00
	LHB R4, 0xff	
	LHB R5, 0x12
	LHB R6, 0x56
	LHB R7, 0xC0
#Lower halves
	LLB R1, 0x01
	LLB R2, 0x00
	LLB R3, 0x03
	LLB R4, 0x00
	LLB R5, 0x34
	LLB R6, 0x78
	LLB R7, 0x00

# R1 = 0x0001 , R2 = 0x8000, R3 = 0x0003, R4 = 0xff00, R5 = 0x1234, R6 = 0x5678, R7 = 0xC000

#Alu operations with NO hazards
ADD R1,R1,R3     //R1 < 1 + 3 = 0x0004
ADD R2,R2,R3     //R2 < -32768 + 3 = 0x8003
SUB R3,R4,R6     //R3 < -256 - 22136 = 0xA888
XOR R5,R5,R4     //R5 < 0x1234 ^ 0xFF00 = 0xED34
RED R7,R6,R1     //R7 < (0x56 + 0x00) + (0x78 + 0x04) = 0x00D2
SLL R4,R4,4      //R4 < 0xFF00 << 4 = 0xF000
SRA R2,R2,14      //R2 < 0x8003 >>> 14 = 0xFFFE
ROR R2,R5,8      //R2 < 0xED34 ROR 8 = 0x34ED
PADDSB R1,R1,R5  //R1 < {(0 + E) , (0 + D) , (0 + 3), (4 + 4) } 0xED37

#Memory test (Reminder: address offsets are sign extended and shifted left by 1)
LLB R5, 0xfc
LHB R5, 0xef	 //R5 = 0xeffc

SW R2, R4, -2	 //Memory[0xEFFC] = 0x34ED (offset = -2 << 1 = -4)
SW R7, R4, 0	 //Memory[0xF000] = 0x00D2
SW R1, R5, 4	 //Memory[0xF004] = 0xED37
SW R5, R5, 6	 //Memory[0xF008] = 0xEFFC

LW R3, R5, 6	 //R3 = Memory[0xF008] = 0xEFFC
// Stall here
LW R2, R3, 0	 //R2 = Memory[0xEFFC] = 0x34ED
LW R1, R3, 2	 //R1 = Memory[0xF000] = 0x00D2
LW R4, R3, 4	 //R4 = Memory[0xF004] = 0xED37

# R0 = ?, R1 = 0x00D2, R2 = 0x34ED, R3 = 0xEFFC, R4 = 0xED37, R5 = 0xEFFC, R6 = 0x5678, R7 = 0x00D2

ADD R3,R3,R1 	 //R3 = 0xEFFC + 0x00D2 = 0xF0CE

LHB R3, 0xFA 	 //R3 = 0xFACE
LLB R3, 0xDE 	 //R3 = 0xFADE = -1314 and 0xF000 = -4096

SW R6, R1, 0	 //Memory[0x00D2] = 0x5678

LLB R3, 0x00
LHB R3, 0xF0
LW R5,R3,0 	 //R5 = Memory[0xF000] = 0x00D2

// Should stall here

// Mem-to-Mem tests
SW R5, R3, 4	 //Memory[0xF008] = 0x00D2
LW R6, R3, 4	 //R6 = Memory[0xF008] = 0x00D2

// Stall tests
// Stall here
LW R4, R6, 0	 //R4 = Memory[0x00D2] = 0x5678
// Stall here
ADD R1, R4, R1	 //R1 = 0x5678 + 0x00D2 = 0x574A
LW R7, R6, 0	 //R7 = Memory[0x00D2] = 0x5678
// Stall here
ADD R2, R1, R7	 //R2 = 0x574A + 0x5678 = 0x7FFF (saturates)
LW R4, R6, 0	 //R4 = Memory[0x00D2] = 0x5678
// Stall here
SLL R1, R4, 5	 //R1 = 0x5678 << 5 = 0xCF00
LW R7, R6, 0	 //R7 = Memory[0x00D2] = 0x5678   - Don't stall here
ROR R2, R1, 3	 //R2 = 0xCF00 ROR 3 = 0x19E0
LW R4, R3, 4	 //R4 = Memory[0xF008] = 0x00D2
// Stall here
SW R2, R4, 2	 //Memory[0x00D6] = 0x19E0
LW R1, R5, 2	 //Memory[0x00D6] = 0x19E0
// Stall here
XOR R1, R1, R2	 //R1 = 0x19E0 ^ 0x19E0 = 0x0000

LLB R2, 0x10
LHB R2, 0x00
BR 000, R1 		// BRneq
BR 001, R2 		// BReq
ADD R2,R1,R3
SUB R4,R1,R3


ADD R0,R0,R0	 //Used as NOPs, don't trust R0's value
ADD R0,R0,R0
ADD R0,R0,R0
ADD R0,R0,R0
ADD R0,R0,R0
ADD R0,R0,R0
ADD R0,R0,R0
ADD R0,R0,R0



